// /**
//  * ----------------------------------------    default
//  */
import React, { Suspense, useState } from "react"
import { useLoader } from "@react-three/fiber"
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader"
import { useFBX } from "@react-three/drei"
import { TextureLoader } from "three"

const FbxModel = () => {
  // const gltf = useLoader(
  //   GLTFLoader,
  //   "/char/fbx/F_MON_21SS_O005/F_MON_21SS_O005.glb"
  // )
  const fbx = useFBX("/char/fbx/F_MON_21SS_O005/F_MON_21SS_O005.FBX")

  const [colorMap, normalMap, roughnessMap, metalnessMap] = useLoader(
    TextureLoader,
    [
      "/char/fbx/F_MON_21SS_O005/F_MON_21SS_O005_D.png",
      "/char/fbx/F_MON_21SS_O005/F_MON_21SS_O005_N.png",
      "/char/fbx/F_MON_21SS_O005/F_MON_21SS_O005_S.png",
    ]
  )

  console.log("fbx >>>>>>>>>>>>>>", fbx)
  console.log("colorMap >>>>>>>>>>>>>>", colorMap)
  const [isHovered, setIsHovered] = useState(true)

  return (
    <Suspense fallback={null}>
      <primitive
        position={[0, 0, 0]}
        object={fbx}
        map={colorMap}
        normalMap={normalMap}
        roughnessMap={roughnessMap}
        metalnessMap={metalnessMap}
        // currentColor={currentColor}
        // onPointerUp={(e: any) => console.log("up")}
        // onPointerDown={(e: any) => console.log("down")}
        // onClick={(e: any) => console.log("click")}
        // onDoubleClick={(e: any) => console.log("double click")}
        // onWheel={(e: any) => console.log("wheel spins")}
        // onPointerMove={(e: any) => console.log("move")}
        onPointerOver={(e: any) => console.log(e.object)}
        onPointerOut={(e: any) => e.object.material.color.set("white")}
        // onPointerLeave={(e: any) => console.log("leave")}
        // onPointerEnter={(e: any) => console.log("enter")}
        // onPointerOut={(e: any) => console.log("out")}
        onContextMenu={(e: any) => console.log("context menu")}
        // onPointerMissed={() => console.log("missed")}
        onUpdate={(self: any) => console.log("props have been updated", self)}
        rotation={isHovered ? [0, Math.PI, 0] : [0, 0, 0]}
      />
    </Suspense>
  )
}

export default FbxModel

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

// import * as THREE from "three"
// import React, { useRef } from "react"
// import { useGLTF } from "@react-three/drei"
// import { GLTF } from "three-stdlib"

// type GLTFResult = GLTF & {
//   nodes: {
//     F_MON_21SS_O005: THREE.SkinnedMesh
//     Bip001_Pelvis: THREE.Bone
//     Bip001_L_Forearm: THREE.Bone
//     Bip001_LUpArmTwist: THREE.Bone
//     Bip001_R_Forearm: THREE.Bone
//     Bip001_RUpArmTwist: THREE.Bone
//     belt_F_01: THREE.Bone
//     belt_L_02: THREE.Bone
//     belt_R_02: THREE.Bone
//     O_bone_B_L1_01: THREE.Bone
//     O_bone_B_L2_01: THREE.Bone
//     O_bone_B_R1_01: THREE.Bone
//     O_bone_B_R2_01: THREE.Bone
//     O_bone_F_L1_01: THREE.Bone
//     O_bone_F_L2_01: THREE.Bone
//     O_bone_F_R1_01: THREE.Bone
//     O_bone_F_R2_01: THREE.Bone
//     O_bone_L_01: THREE.Bone
//     O_bone_R_01: THREE.Bone
//   }
//   materials: {
//     F_MON_21SS_O005: THREE.MeshStandardMaterial
//   }
// }

// export default function TestCharacter({
//   ...props
// }: JSX.IntrinsicElements["group"]) {
//   const group = useRef<THREE.Group>(null)
//   const { nodes, materials } = useGLTF(
//     "/char/fbx/F_MON_21SS_O005/F_MON_21SS_O005.glb"
//   ) as GLTFResult
//   return (
//     <group ref={group} {...props} dispose={null}>
//       <group>
//         <group name="RootNode" userData={{ name: "RootNode" }}>
//           <group name="ROOT" userData={{ name: "ROOT" }}>
//             <group
//               name="Bip001"
//               position={[0, 3.59, 102.33]}
//               rotation={[0, 0, -1.57]}
//               userData={{ name: "Bip001" }}
//             >
//               <primitive object={nodes.Bip001_Pelvis} />
//             </group>
//           </group>
//           <skinnedMesh
//             name="F_MON_21SS_O005"
//             geometry={nodes.F_MON_21SS_O005.geometry}
//             material={materials.F_MON_21SS_O005}
//             skeleton={nodes.F_MON_21SS_O005.skeleton}
//             userData={{ name: "F_MON_21SS_O005" }}
//           />
//         </group>
//       </group>
//     </group>
//   )
// }

// useGLTF.preload("/char/fbx/F_MON_21SS_O005/F_MON_21SS_O005.glb")
