/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three"
import React, { useEffect, useRef } from "react"
import { useBounds, useGLTF } from "@react-three/drei"
import { GLTF } from "three-stdlib"
import { Object3D } from "three"

type GLTFResult = GLTF & {
  nodes: {
    [keys: string]: THREE.Mesh
  }
  materials: {
    [keys: string]: THREE.MeshStandardMaterial
  }
}

interface Props extends Object3D {
  cameraLookAtIndex: number
  props: JSX.IntrinsicElements["group"]
}

const AvatarHair = ({ cameraLookAtIndex, ...props }: any) => {
  const group = useRef<THREE.Group>(null)
  const { nodes, materials } = useGLTF(
    "/char/avatar_clothes/clothes.glb"
  ) as GLTFResult

  const api = useBounds()

  useEffect(() => {
    if (true && group.current) {
      api.refresh(group.current).fit()
    }
  }, [])

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      onClick={e => (
        e.stopPropagation(), e.delta <= 2 && api.refresh(e.object).fit()
      )}
      onPointerMissed={e => e.button === 0 && api.refresh().fit()}
    >
      {/* hair */}
      <mesh
        geometry={nodes.F_HAIR_1030000.geometry}
        material={materials.NewMat03}
        rotation={[-Math.PI / 2, 0, 0]}
        castShadow
      />
    </group>
  )
}

useGLTF.preload("/char/avatar_clothes/clothes.glb")

export default AvatarHair
