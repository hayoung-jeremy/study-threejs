/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three"
import React, { useRef } from "react"
import { useGLTF } from "@react-three/drei"
import { GLTF } from "three-stdlib"

type GLTFResult = GLTF & {
  nodes: {
    [keys: string]: THREE.Mesh
  }
  materials: {
    [keys: string]: THREE.MeshStandardMaterial
  }
}

export default function Model({ ...props }: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null)
  const { nodes, materials } = useGLTF(
    "char/haus//NFT_BOOTS_BODY.glb"
  ) as GLTFResult
  return (
    <group ref={group} {...props} dispose={null}>
      {/* Quarter */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.OP1_BASE_01.geometry}
        material={materials.OP1_BASE_01}
        rotation={[-Math.PI / 2, 0, 0]}
        material-color="#FAD4D4"
      />

      {/* Vamp */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.OP1_BASE_02.geometry}
        material={materials.OP1_BASE_02}
        rotation={[-Math.PI / 2, 0, 0]}
        material-color="#FFF2F2"
      />
      {/* Lace */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.OP1_BASE_03.geometry}
        material={materials.OP1_BASE_03}
        rotation={[-Math.PI / 2, 0, 0]}
        material-color="#EF9F9F"
      />

      {/* Back Counter */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.OP1_BASE_04.geometry}
        material={materials.OP1_BASE_04}
        rotation={[-Math.PI / 2, 0, 0]}
        material-color="#EF9F9F"
      />

      {/* Pull loops */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.OP1_BASE_05.geometry}
        material={materials.OP1_BASE_05}
        rotation={[-Math.PI / 2, 0, 0]}
        material-color="#EF9F9F"
      />
    </group>
  )
}

useGLTF.preload("char/haus//NFT_BOOTS_BODY.glb")
